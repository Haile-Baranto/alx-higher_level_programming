"""
Doctests for the matrix_mul function.

>>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

# Edge Cases

# Test with m_a and m_b not being a list
>>> matrix_mul(5, [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: Scalar operands are not allowed, use '*' instead

# Test with m_a and m_b not being a list of lists
>>> matrix_mul([1, 2], [[1, 2], [3, 4]])
[7, 10]

# Test with m_a or m_b being empty
>>> matrix_mul([], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)


# Test with an element in m_a or m_b not being an integer or float
>>> matrix_mul([[1, 2], [3, 'four']], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: invalid data type for einsum

# Test with m_a or m_b not being a rectangle
>>> matrix_mul([[1, 2], [3]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: Object arrays are not currently supported

# Test with incompatible matrix dimensions for multiplication
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [4, 5, 6]])
[[9, 12, 15], [19, 26, 33]]

# Valid Cases

# Test with valid multiplication of square matrices
>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
[[19, 22], [43, 50]]

# Test with valid multiplication of rectangular matrices
>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
[[58, 64], [139, 154]]

# Test with valid multiplication with identity matrix
>>> matrix_mul([[1, 0], [0, 1]], [[5, 6], [7, 8]])
[[5, 6], [7, 8]]

# Test with valid multiplication with zero matrix
>>> matrix_mul([[0, 0], [0, 0]], [[1, 2], [3, 4]])
[[0, 0], [0, 0]]

# Test with valid multiplication with scalar
>>> matrix_mul([[2]], [[3]])
[[6]]

# Test with valid multiplication with empty matrix
>>> matrix_mul([[]], [[1, 2], [3, 4]])
Traceback (most recent call last):
...
ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

"""